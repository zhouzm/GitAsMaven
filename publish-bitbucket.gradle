apply plugin: 'java'
apply plugin: 'maven'

repositories {
  maven { url "https://raw.githubusercontent.com/synergian/wagon-git/releases" }
}

configurations {
  deployLibrary
}

dependencies {
  compile fileTree(dir: 'libs', include: ['*.jar'])
  deployLibrary "ar.com.synergian:wagon-git:0.3.0"
}

task javadocs(type: Javadoc) {
  failOnError false
  source = sourceSets.main.java
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.java
}

task javadocsJar(type: Jar, dependsOn: javadocs) {
  classifier = 'javadoc'
  from javadocs.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocsJar
}

task lookForArtifacts {
  doLast {
    def artifactName = ARTIFACT_NAME + '-' + ARTIFACT_VERSION + '.jar'
    def artifactPath = ARTIFACT_PACKAGE.replace(".", "/") + "/" + ARTIFACT_NAME + "/" + ARTIFACT_VERSION + "/" + artifactName
    def repositoryUrl = 'https://api.bitbucket.org/2.0/repositories/' + COMPANY + '/' + REPOSITORY_NAME + '/src/releases/' + artifactPath

    println("")
    println("Checking if artifact already exists: " + artifactName)
    println("at URL: " + repositoryUrl)

    def artifactExists = urlExists(repositoryUrl)
    println(artifactExists ? "existing artifact found" : "no existing artifact found")
    println("")

    if (urlExists(repositoryUrl)) {
        throw new RuntimeException("Artifact with version " + ARTIFACT_VERSION + " already exist - not executing uploadArchives")
    }
    return true
  }
}

// uncomment below to check existing versions
// uploadArchives.dependsOn lookForArtifacts

uploadArchives {
  repositories.mavenDeployer {
    configuration = configurations.deployLibrary
    repository(url: "git:releases://https://" + USERNAME + ":" + project.ACCESS_TOKEN + "@bitbucket.org/" + COMPANY +"/" + REPOSITORY_NAME + ".git")

    uniqueVersion = true

    pom.project {
      groupId = ARTIFACT_PACKAGE
      version = ARTIFACT_VERSION
      artifactId = ARTIFACT_NAME
      packaging ARTIFACT_PACKAGING
    }
  }
}

def urlExists(String repositoryUrl) {
  try {
    def connection = (HttpURLConnection) new URL(repositoryUrl).openConnection()

    connection.setRequestProperty("Authorization", "Bearer " + project.ACCESS_TOKEN)
    connection.setConnectTimeout(10000)
    connection.setReadTimeout(10000)
    connection.setRequestMethod("HEAD")

    def responseCode = connection.getResponseCode()
    println("responseCode: " + responseCode)

    if (responseCode == 401 || responseCode == 403) {
      throw new RuntimeException("Unauthorized BitBucket user - please provide valid KEY and SECRET in gradle.properties file")
    }

    return (200 == responseCode)
  } catch (IOException ignored) {
    return false
  }
}


